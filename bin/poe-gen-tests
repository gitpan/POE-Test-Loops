#!/usr/bin/perl -w

use strict;
use File::Spec;
use File::Path;
use File::Find;
use Getopt::Long;
use POE::Test::Loops;

my $dir_base;
my $flag_help;
my @loop_modules;
my $flag_verbose;

my $result = GetOptions(
  'dirbase=s' => \$dir_base,
  'loop=s' => \@loop_modules,
  'verbose' => \$flag_verbose,
  help => \$flag_help,
);

if (
  !$result or !$dir_base or $flag_help or !@loop_modules
) {
  die(
    "$0 usage:\n",
    "  --dirbase DIR   (required) base directory for tests\n",
    "  --loop MODULE   (required) loop modules to test\n",
    "  --verbose   show some extra output\n",
    "  --help   you're reading it\n",
  );
}

### Find the test libraries.

use lib qw(./lib ../lib);
use POE::Test::DondeEstan;
my $source_base = POE::Test::DondeEstan->marco();

### Generate loop tests.

foreach my $loop (@loop_modules) {
  my $loop_dir = lc($loop);
  $loop_dir =~ s/::/_/g;

  my $fqmn = find_event_loop_file($loop);
  unless ($fqmn) {
    $flag_verbose and print "Couldn't find a loop for $loop ...\n";
    next;
  }

  $flag_verbose and print "Found $fqmn\n";

  my $loop_cfg = get_loop_cfg($fqmn);
  unless (defined $loop_cfg and length $loop_cfg) {
    $loop_cfg = (
      "sub skip_tests { return }"
    );
  }

  my $source = (
    "#!/usr/bin/perl -w\n" .
    "# \$Id\$\n" .
    "\n" .
    "use strict;\n" .
    "\n" .
    "use lib qw(--base_lib--);\n" .
    "use Test::More;\n" .
    "use POSIX qw(_exit);\n" .
    "\n" .
    "--loop_cfg--\n" .
    "\n" .
    "BEGIN {\n" .
    "  if (my \$why = skip_tests('--test_name--')) {\n" .
    "    plan skip_all => \$why\n" .
    "  }\n" .
    "}\n" .
    "\n" .
    "# Run the tests themselves.\n" .
    "require '--base_file--';\n" .
    "\n" .
    "_exit 0 if \$^O eq 'MSWin32';\n" .
    "CORE::exit 0;\n"
  );

  # Full directory where source files are found.

  my $dir_src = File::Spec->catfile($source_base, "Loops");
  my $dir_dst = File::Spec->catfile($dir_base, $loop_dir);

  # Gather the list of source files.
  # Each will be used to generate a real test file.

  opendir BASE, $dir_src or die $!;
  my @base_files = grep /\.pm$/, readdir(BASE);
  closedir BASE;

  # Initialize the destination directory.  Clear or create as needed.

  $dir_dst =~ tr[/][/]s;
  $dir_dst =~ s{/+$}{};

  rmtree($dir_dst);
  mkpath($dir_dst, 0, 0755);

  # For each source file, generate a corresponding one in the
  # configured destination directory.  Expand various bits to
  # customize the test.

  foreach my $base_file (@base_files) {
    my $test_name = $base_file;
    $test_name =~ s/\.pm$//;

    my $full_file = File::Spec->catfile($dir_dst, $base_file);
    $full_file =~ s/\.pm$/.t/;

    # These hardcoded expansions are for the base file to be required,
    # and the base library directory where it'll be found.

    my $expanded_src = $source;
    $expanded_src =~ s/--base_file--/$base_file/g;
    $expanded_src =~ s/--base_lib--/$dir_src/g;
    $expanded_src =~ s/--loop_cfg--/$loop_cfg/g;
    $expanded_src =~ s/--test_name--/$test_name/g;

    # Write with lots of error checking.

    open EXPANDED, ">$full_file" or die $!;
    print EXPANDED $expanded_src;
    close EXPANDED or die $!;
  }
}

exit 0;

sub find_event_loop_file {
  my $loop_name = shift;
  $loop_name =~ s/::/_/g;

  my $loop_module = File::Spec->catfile("POE", "Loop", $loop_name) .  ".pm";

  foreach my $inc (@INC) {
    my $fqmn = File::Spec->catfile($inc, $loop_module);
    next unless -f $fqmn;
    return $fqmn;
  }

  return;
}

sub get_loop_cfg {
  my $fqmn = shift;

  my ($in_test_block, @test_source);

  open SOURCE, "<$fqmn" or die $!;
  while (<SOURCE>) {
    if ($in_test_block) {
      $in_test_block = 0, next if /^=cut\s*$/;
      push @test_source, $_;
      next;
    }

    next unless /^=for\s+poe_tests\s*/;
    $in_test_block = 1;
  }

  shift @test_source while @test_source and $test_source[0] =~ /^\s*$/;
  pop @test_source while @test_source and $test_source[-1] =~ /^\s*$/;

  return join "", @test_source;
}

__END__

=head1 NAME

poe-gen-tests - generate standard POE tests for third-party modules

=head1 SYNOPSIS

  poe-gen-tests --dirbase t/loops \
    --loop Glib \
    --loop Kqueue \
    --loop Event::Lib

=head1 DESCRIPTION

This program and the accompanying POE::Test::Loop::* modules make up
POE's tests for POE::Loop subclasses.  These tests are designed to run
identically regardless of the current event loop.  POE uses them to
test the event loops it bundles:

  POE::Loop::Gtk
  POE::Loop::IO_Poll (--loop IO::Poll)
  POE::Loop::Tk
  POE::Loop::Event
  POE::Loop::Select

Developers of other POE::Loop modules are encouraged use this package
to generate over 420 comprehensive tests for their own work.

=head1 USAGE

poe-gen-tests creates test files for one or more event loops beneath
the directory specified in --dirbase.  For example,

  poe-gen-tests --dirbase t/loops --loop Select

generates the following test files:

  t/loops/select/all_errors.t
  t/loops/select/comp_tcp.t
  t/loops/select/comp_tcp_concurrent.t
  t/loops/select/k_alarms.t
  t/loops/select/k_aliases.t
  t/loops/select/k_detach.t
  t/loops/select/k_selects.t
  t/loops/select/k_sig_child.t
  t/loops/select/k_signals.t
  t/loops/select/k_signals_rerun.t
  t/loops/select/sbk_signal_init.t
  t/loops/select/ses_nfa.t
  t/loops/select/ses_session.t
  t/loops/select/wheel_accept.t
  t/loops/select/wheel_curses.t
  t/loops/select/wheel_readline.t
  t/loops/select/wheel_readwrite.t
  t/loops/select/wheel_run.t
  t/loops/select/wheel_sf_ipv6.t
  t/loops/select/wheel_sf_tcp.t
  t/loops/select/wheel_sf_udp.t
  t/loops/select/wheel_sf_unix.t
  t/loops/select/wheel_tail.t

The --loop parameter completes the POE::Loop::... package name.  It
may be specified with namespaces separated by "::" or "_".  Event::Lib
and Event_Lib are identical as far as poe-gen-tests is concerned.

poe-gen-tests looks for a "=for poe_tests" section within the
POE::Loop class being tested.  If defined, this section should include
a single function, skip_tests(), that determines whether any given
test should be skipped.

skip_tests() is called with one parameter, the base name of the test
about to be executed.  It returns false if the test should run, or a
message that will be displayed to the user explaining why the test
will be skipped.  This message is passed directly to Test::More's
plan() along with "skip_all".  The logic is essentially:

  if (my $why = skip_tests("k_signals_rerun")) {
    plan skip_all => $why;
  }

skip_tests() should load any modules required by the event loop.  See
most of the examples below.

=head2 Example poe_tests Directives

From POE::Loop::Event

  =for poe_tests

  sub skip_tests {
    my $test_name = shift;
    if ($test_name eq "k_signals_rerun" and $^O eq "MSWin32") {
      return "This test crashes Perl when run with Event on $^O";
    }
    return "Event tests require the Event module" if (
      do { eval "use Event"; $@ }
    );
  }

  =cut

From POE::Loop::Gtk

  =for poe_tests

  sub skip_tests {
    return "Gtk needs a DISPLAY (set one today, okay?)" unless (
      defined $ENV{DISPLAY} and length $ENV{DISPLAY}
    );
    return "Gtk tests require the Gtk module" if do { eval "use Gtk"; $@ };
    return;
  }

  =cut

From POE::Loop::IO_Poll

  =for poe_tests

  sub skip_tests {
    return "IO::Poll is not 100% compatible with $^O" if $^O eq "MSWin32";
    return "IO::Poll tests require the IO::Poll module" if (
      do { eval "use IO::Poll"; $@ }
    );
  }

  =cut

From POE::Loop::Select

  =for poe_tests

  sub skip_tests { return }

  =cut

From POE::Loop::Tk

  =for poe_tests

  sub skip_tests {
    return "Tk needs a DISPLAY (set one today, okay?)" unless (
      (defined $ENV{DISPLAY} and length $ENV{DISPLAY}) or $^O eq "MSWin32"
    );
    my $test_name = shift;
    if ($test_name eq "k_signals_rerun" and $^O eq "MSWin32") {
      return "This test crashes Perl when run with Tk on $^O";
    }
    return "Tk tests require the Tk module" if do { eval "use Tk"; $@ };
    return;
  }

  =cut

=head1 INSTALL SCRIPT INTEGRATION

The POE::Loop tests started out as part of the POE distribution.  All
the recommendations and examples that follow are written and tested
against ExtUtils::MakeMaker because that's what POE uses.  Please
adjust these recipes according to your taste and preference.

=head2 Calling the Test Generator

Tests need to be generated prior to the user or CPAN shell running
"make test".  A tidy way to do this might be to create a new Makefile
target and include that as a dependency for "make test".  POE takes a
simpler approach, calling the script from its Makefile.PL:

  system(
    $^X, "poe-gen-tests", "--dirbase", "t/30_loops",
    "--loop", "Event", "--loop", "Gtk", "--loop", "IO::Poll",
    "--loop", "Select", "--loop", "Tk",
  ) and die $!;

The previous approach generates tests at install time, so it's not
necessary to include the generated files in the MANIFEST.  Test
directories should also be excluded from the MANIFEST.  poe-gen-tests
will create the necessary paths.

It's also possible to generate the tests prior to "make dist".  The
distribution's MANIFEST must include the generated files in this case.

Most people will not need to add the generated tests to their
repositories.

=head1 Running the Tests

By default, ExtUtils::MakeMaker generates Makefiles that only run
tests matching t/*.t.  However authors are allowed to specify other
test locations.  Add the following parameter to WriteMakefile() so
that the tests generated above will be executed:

  tests => {
    TESTS => "t/*.t t/30_loops/*/*.t",
  }

=head1 CLEANING UP

Makefiles will not clean up files that aren't present in the MANIFEST.
This includes tests generated at install time.  If this bothers you,
you'll need to add directives to include the generated tests in the
"clean" and "distclean" targets.

  clean => {
    FILES => "t/30_loops/*/* t/30_loops/*",
  }

This assumes the "t/30_loops" directory contains only generated tests.
It's recommended that generated and hand-coded tests not coexist in
the same directory.

It seems like a good idea to delete the deeper directories and files
before their parents.

=head1 Skipping Network Tests

Some generated tests require a network to be present and accessible.
Those tests will be skipped unless the file "run_network_tests" is
present in the main distribution directory.  You can include that file
in your distribution's tarball, but it's better create it at install
time after asking the user.  Here's how POE does it.  Naturally you're
free to do it some other way.

  # Switch to default behavior if STDIN isn't a tty.

  unless (-t STDIN) {
    warn(
      "\n",
      "=============================================\n\n",
      "STDIN is not a terminal.  Assuming --default.\n\n",
      "=============================================\n\n",
    );
    push @ARGV, "--default";
  }

  # Remind the user she can use --default.

  unless (grep /^--default$/, @ARGV) {
    warn(
      "\n",
      "================================================\n\n",
      "Prompts may be bypassed with the --default flag.\n\n",
      "================================================\n\n",
    );
  }

  # Should we run the network tests?

  my $prompt = (
    "Some of POE's tests require a functional network.\n" .
    "You can skip these tests if you'd like.\n\n" .
    "Would you like to skip the network tests?"
  );

  my $ret = "n";
  if (grep /^--default$/, @ARGV) {
    print $prompt, " [$ret] $ret\n\n";
  }
  else {
    $ret = prompt($prompt, "n");
  }

  my $marker = 'run_network_tests';
  unlink $marker;
  if ($ret =~ /^Y$/i) {
    open(TOUCH,"+>$marker") and close TOUCH;
  }

  print "\n";

=head1 AUTHOR & COPYRIGHT

Rocco Caputo <rcaputo@cpan.org>.
Benjamin Smith <bsmith@cpan.org>.
Countless other people.

These tests are Copyright 1998-2008 by Rocco Caputo, Benjamin Smith,
and countless contributors.  All rights are reserved.  These tests are
free software; you may redistribute them and/or modify them under the
same terms as Perl itself.

Thanks to Martijn van Beers for beta testing and suggestions.

=cut
